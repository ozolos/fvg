// Generated by CoffeeScript 1.7.1
(function() {
  var CSON, async, compile, don_png, don_svg, exec, execFile, fs, parse, raven, svgpng, validate;

  exec = require('child_process').exec;

  execFile = require('child_process').execFile;

  fs = require('fs-extra');

  CSON = require('cson');

  async = require('async');

  svgpng = require('svg2png');

  parse = require('./parser').parse;

  validate = require('./validator').parse;

  this.g_json = null;

  this.g_code = null;

  this.g_parsed = null;

  exports.compile = compile = function(src, callback) {
    var eof, no_one;
    no_one = ['fs = require \'fs-extra\'', 'u = require \'underscore\'', 'jaqen = []'];
    eof = ['console.log [ {code : jaqen} , {json : mask} ]'];
    return async.waterfall([
      function(callback) {
        var json_0, json_1;
        if (src.slice(-4) === '.fvg' || src.slice(-4) === '.svg') {
          return fs.readFile(src, 'utf-8', function(err, code) {
            raven('@compile[readFile]', err);
            no_one.push(parse(code), eof);
            return callback(null, no_one.join(';'));
          });
        } else {
          json_0 = CSON.stringifySync(this.g_json);
          json_1 = json_0.replace(/\n/g, " ").replace(/\"/g, "\'");
          no_one.push((typeof g_json !== "undefined" && g_json !== null ? "mask = " + json_1 : ''), parse(src), eof);
          return callback(null, no_one.join(';'));
        }
      }, function(code, callback) {
        return exec('coffee -e \"' + code + '\"', function(error, stdout, stderr) {
          raven('@compile[exec]', error);
          this.g_parsed = CSON.parseSync(stdout);
          this.g_code = this.g_parsed[0].code;
          this.g_json = this.g_parsed[1].json;
          return callback(null, this.g_code.join(''));
        });
      }
    ], function(err, result) {
      raven('@compile', err);
      if (validate(result)) {
        if (callback != null) {
          return callback(null, result);
        } else {
          return result;
        }
      } else {
        return compile(result, callback);
      }
    });
  };

  exports.don_svg = don_svg = function(src, dest) {
    return compile(src, function(err, result) {
      return fs.writeFile(dest, result, function(err) {
        return raven('@don_svg[writeFile]', err, true);
      });
    });
  };

  exports.don_png = don_png = function(src, dest, opt) {
    var dest_svg, pngquant;
    if (opt == null) {
      opt = [1, true];
    }
    dest_svg = '.' + dest.slice(0, -4) + '.svg';
    pngquant = __dirname + '/../bin/pngquant';
    return compile(src, function(err, result) {
      return fs.writeFile(dest_svg, result, function(err) {
        raven('@don_png[writeFile]', err);
        return svgpng(dest_svg, dest, opt[0], function(err) {
          fs.unlinkSync(dest_svg);
          if (opt[1] || (opt[1] == null)) {
            return execFile(pngquant, ["--nofs", "--ext=.png", "--force", dest], function(error, stdout, stderr) {
              return raven('@don_png[optimize]', error, true);
            });
          } else {
            return raven('@don_png[!optimize]', err, true);
          }
        });
      });
    });
  };

  raven = function(identity, error, success) {
    if (success == null) {
      success = false;
    }
    if (!error && success) {
      console.log(identity + ': "The Red God is pleased."\n');
    }
    if (error != null) {
      return console.log(identity + ': "Valar morghulis."\n\n', error);
    }
  };

}).call(this);
