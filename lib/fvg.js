// Generated by CoffeeScript 1.7.1
(function() {
  var async, exec, execFile, fs, parse, pngquant, raven, svgpng;

  exec = require('child_process').exec;

  execFile = require('child_process').execFile;

  fs = require('fs-extra');

  async = require('async');

  svgpng = require('svg2png');

  parse = require('./parse').parse;

  pngquant = __dirname + '/../bin/pngquant';

  module.exports = {
    don_svg: function(face, mask) {
      return async.waterfall([
        function(callback) {
          return fs.writeFile('.no_one.js', 'var fs = require( \'fs-extra\' );\njaqen = [];\n', function(err) {
            var iden;
            iden = 'A vector image [callback.0]';
            raven(iden, err, false);
            return callback(null);
          });
        }, function(callback) {
          return fs.readFile(face, 'utf-8', function(err, code) {
            var iden;
            iden = 'A vector image [callback.1]';
            raven(iden, err, false);
            return callback(null, parse(code));
          });
        }, function(input, callback) {
          return fs.appendFile('.no_one.js', input, function(err) {
            var iden;
            iden = 'A vector image [callback.2]';
            raven(iden, err, false);
            return callback(null);
          });
        }, function(callback) {
          return fs.appendFile('.no_one.js', 'fs.writeFileSync( \"' + mask + '\", jaqen.join( \"\" ) );', function(err) {
            var iden;
            iden = 'A vector image [callback.3]';
            raven(iden, err, false);
            return callback(null);
          });
        }
      ], function(err, result) {
        return exec('node .no_one.js', function(error, stdout, stderr) {
          var iden;
          fs.unlinkSync('.no_one.js');
          iden = '\n    A vector image';
          return raven(iden, error, true);
        });
      });
    },
    don_png: function(face, mask, opt) {
      var fake;
      if (opt == null) {
        opt = [1, true];
      }
      fake = '.' + mask.slice(0, -4) + '.svg';
      return async.waterfall([
        function(callback) {
          return fs.writeFile('.no_one.js', 'var fs = require( \'fs-extra\' );\njaqen = [];\n', function(err) {
            var iden;
            iden = 'A raster image [callback.0]';
            raven(iden, err, false);
            return callback(null);
          });
        }, function(callback) {
          return fs.readFile(face, 'utf-8', function(err, code) {
            var iden;
            iden = 'A raster image [callback.1]';
            raven(iden, err, false);
            return callback(null, parse(code));
          });
        }, function(input, callback) {
          return fs.appendFile('.no_one.js', input, function(err) {
            var iden;
            iden = 'A raster image [callback.2]';
            raven(iden, err, false);
            return callback(null);
          });
        }, function(callback) {
          return fs.appendFile('.no_one.js', 'fs.writeFileSync( \"' + fake + '\", jaqen.join( \"\" ) );', function(err) {
            var iden;
            iden = 'A raster image [callback.3]';
            raven(iden, err, false);
            return callback(null);
          });
        }, function(callback) {
          return exec('node .no_one.js', function(error, stdout, stderr) {
            var iden;
            iden = 'A raster image [callback.4]';
            raven(iden, error, false);
            fs.unlinkSync('.no_one.js');
            return callback(null);
          });
        }
      ], function(err, result) {
        return svgpng(fake, mask, opt[0], function(err) {
          var iden;
          fs.unlinkSync(fake);
          if (opt[1] || (opt[1] == null)) {
            return execFile(pngquant, ["--nofs", "--ext=.png", "--force", mask], function() {
              var iden;
              iden = '\n    A raster image [optimized]';
              return raven(iden, err, true);
            });
          } else {
            iden = '\n    A raster image [unoptimized]';
            return raven(iden, err, true);
          }
        });
      });
    }
  };

  raven = function(iden, error, success) {
    if (success == null) {
      success = false;
    }
    if (!error && success) {
      console.log(iden + ': "Valar dohaeris."\n');
    }
    if (error != null) {
      return console.log(iden + ': "Valar morghulis."\n\n', error);
    }
  };

}).call(this);
