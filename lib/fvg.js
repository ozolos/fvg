// Generated by CoffeeScript 1.7.1
(function() {
  var async, compile, don_png, don_svg, exec, execFile, fs, parse, path, raven, svgpng;

  exec = require('child_process').exec;

  execFile = require('child_process').execFile;

  fs = require('fs-extra');

  path = require('path');

  async = require('async');

  svgpng = require('svg2png');

  parse = require('./parser').parse;

  global.json = null;

  global.code = null;

  global.parsed = null;

  exports.compile = compile = function(src, callback) {
    var no_one;
    no_one = [];
    return async.waterfall([
      function(next) {
        if (fs.existsSync(src)) {
          return fs.readFile(src, 'utf-8', function(err, code) {
            raven('@compile.readFile.', err);
            return next(null, code);
          });
        } else {
          return next(null, src);
        }
      }, function(code, next) {
        var error, fvarTest, i, j, jsonTest, l, linkTest, n, refTest, workingdir, x, _results;
        try {
          no_one = JSON.parse(parse(code));
        } catch (_error) {
          error = _error;
          raven('@compile.JSONparse', error);
        }
        workingdir = path.dirname(src) + '/';
        jsonTest = no_one.some(function(x) {
          return x[0] === "json";
        });
        fvarTest = no_one.some(function(x) {
          return x[0] === "fvar";
        });
        refTest = no_one.some(function(x) {
          return x[0] === "ref";
        });
        linkTest = no_one.some(function(x) {
          return x[0] === "link";
        });
        if (fvarTest && !jsonTest) {
          console.log("@compile.JSONparse: No linked JSON for variables");
        }
        if (jsonTest) {
          j = no_one.filter(function(x) {
            return x[0] === "json";
          });
          global.json = fs.readJsonSync(workingdir + j[0][1]);
        }
        n = 0;
        l = no_one.length;
        _results = [];
        while (n < no_one.length) {
          i = no_one[n];
          if (i[0] === "fvar") {
            x = eval("global.json." + i[1]);
            i[0] = "xml";
            i[1] = x;
          }
          if (i[0] === "ref") {
            x = eval("global.json." + i[1]);
            i[0] = "link";
            i[1] = x;
          }
          if (i[0] === "link") {
            x = JSON.parse(parse(fs.readFileSync(workingdir + i[1], 'utf-8')));
            no_one.splice.apply(no_one, [n, 1].concat(x));
          }
          n++;
          if (n === no_one.length) {
            _results.push(next(null, no_one));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }, function(array, next) {
        var temp;
        temp = [];
        return async.each(array, function(i, callback) {
          temp.push(i[1]);
          return callback();
        }, function(err) {
          return next(null, temp.join(''));
        });
      }
    ], function(err, compiled) {
      raven('@compile', err);
      global.parsed = compiled;
      return callback(null, compiled);
    });
  };

  exports.don_svg = don_svg = function(src, dest) {
    return compile(src, function(err, result) {
      return fs.writeFile(dest, result, function(err) {
        return raven('@don_svg[writeFile]', err, true);
      });
    });
  };

  exports.don_png = don_png = function(src, dest, opt) {
    var dest_svg, pngquant;
    if (opt == null) {
      opt = [1, true];
    }
    dest_svg = dest.slice(0, -4) + '.svg';
    pngquant = __dirname + '/../bin/pngquant';
    return compile(src, function(err, result) {
      return fs.writeFile(dest_svg, result, function(err) {
        raven('@don_png[writeFile]', err);
        return svgpng(dest_svg, dest, opt[0], function(err) {
          fs.stat(dest_svg, function(err, stats) {
            if (stats != null) {
              return fs.unlinkSync(dest_svg);
            }
          });
          if (opt[1] || (opt[1] == null)) {
            return execFile(pngquant, ['--nofs', '--ext=.png', '--force', dest], function(error, stdout, stderr) {
              return raven('@don_png[optimize]', error, true);
            });
          } else {
            return raven('@don_png[!optimize]', err, true);
          }
        });
      });
    });
  };

  raven = function(identity, error, success) {
    if (success == null) {
      success = false;
    }
    if (!error && success) {
      console.log(identity + ': The Red God is pleased.');
    }
    if (error != null) {
      return console.log(identity + ': Valar morghulis.', error);
    }
  };

}).call(this);
