// Generated by CoffeeScript 1.7.1
(function() {
  var CSON, async, compile, exec, fs, parse, raven, svgpng, validate;

  exec = require('child_process').exec;

  fs = require('fs-extra');

  CSON = require('cson');

  async = require('async');

  svgpng = require('svg2png');

  parse = require('./parser').parse;

  validate = require('./validator').parse;


  /*
  -----------------------
  
  compiler is the ENTIRE process
  
      1. parse fvg
          if ƒ.echo{}
              1.1. parse fvg
                  if ƒ.echo{}, &c
      2. build svg
  
  catch endless links (only go 12 deep for now?)
  
  ------------------------
   */

  exports.compile = compile = function(src, dest) {
    var eof, no_one;
    no_one = ['fs = require \'fs-extra\'', 'u = require \'underscore\'', 'jaqen = []'];
    eof = ['console.log [ {code : jaqen} , {json : mask} ] '];
    return async.waterfall([
      function(callback) {
        if (src.slice(-4) === '.fvg' || src.slice(-4) === '.svg') {
          return fs.readFile(src, 'utf-8', function(err, code) {
            raven('reading', err);
            no_one.push(parse(code), eof);
            return callback(null, no_one.join(';'));
          });
        } else {
          no_one.push((typeof json !== "undefined" && json !== null ? "mask = " + json : ''), parse(src), eof);
          return callback(null, no_one.join(';'));
        }
      }, function(code, callback) {
        console.log('\n\n\nCODE LOG:\n\n' + code + '\n\n\n');
        return exec('coffee -e \"' + code + '\"', function(error, stdout, stderr) {
          var json, parsed;
          raven('executing', error);
          parsed = CSON.parseSync(stdout);
          code = parsed[0].code;
          json = parsed[1].json;
          return callback(null, code.join(''));
        });
      }
    ], function(err, result) {
      if (validate(result)) {
        return fs.writeFile(dest, result, function(err) {
          return raven('writing', err);
        });
      } else {
        return compile(result, dest);
      }
    });
  };


  /*
      don_svg: (face, mask, iden, callback) ->
  
          if !iden? then iden = [
              'A vector image [callback.0]'
              'A vector image [callback.1]'
              'A vector image [callback.2]'
              'A vector image [callback.3]'
              '\n    A vector image'
          ]
  
          async.waterfall [
  
              (callback) ->
                  fs.writeFile 'no_one.coffee', 'fs = require \'fs-extra\' )\nfvg = require \'fvg\' )\njaqen = []\n', (err) ->
                      raven iden[0], err
                      callback null
  
              , (callback) ->
                  fs.readFile face, 'utf-8', (err, code) ->
                      raven iden[1], err
  
  
  
                       * console.log( validator( compiler ( code ) ) )
                      if validator( compiler ( code ) )
                          console.log( 'true... WHAT!?!?!' )
                      else
                          console.log( 'false...HMMMM?' )
                      callback null, compiler( code )
  
              , (input, callback) ->
                  fs.appendFile 'no_one.coffee', input, (err) ->
                      raven iden[2], err
                      callback null
  
              , (callback) ->
                  fs.appendFile 'no_one.coffee', 'fs.writeFileSync \"' + mask + '\", jaqen.join( \"\" )', (err) ->
                      raven iden[3], err
                      callback null
  
          ], (err, result) ->
              exec 'coffee no_one.coffee', (error, stdout, stderr) ->
                   * fs.unlinkSync 'no_one.coffee'
                  if callback?
                      callback null
                      raven iden[4], error
                  else
                      raven iden[4], error, true
  
  
       * 'face' is the input [fvg]
       * 'mask' is the output [png]
       * 'fake' is the svg on the way to output [png]
       * 'opt' is an array [ratio, optimize]
  
      don_png: (face, mask, opt = [1, true]) ->
  
          fake = '.' + mask.slice(0, -4) + '.svg'
  
          iden = [
              'A raster image [callback.0]'
              'A raster image [callback.1]'
              'A raster image [callback.2]'
              'A raster image [callback.3]'
              'A raster image [callback.4]'
              '\n    A raster image [optimized]'
              '\n    A raster image [unoptimized]'
          ]
  
          @don_svg( face, fake, iden, (err, result) ->
  
              pngquant =  __dirname + '/../bin/pngquant'
  
              svgpng fake, mask, opt[0], (err) ->
                   * console.log( 'svgpng:', fake, mask, iden, opt, err )
                  fs.unlinkSync fake
                  if opt[1] or !opt[1]?
                      execFile pngquant, [ "--nofs", "--ext=.png", "--force", mask ], -> raven iden[5], err, true
                  else
                      raven iden[6], err, true
              )
  
  
  
  wtf = (src, dest) -> compile( src, dest )
   */

  raven = function(i, error, success) {
    if (success == null) {
      success = false;
    }
    if (!error && success) {
      console.log(i + ': "Valar dohaeris."\n');
    }
    if (error != null) {
      return console.log(i + ': "Valar morghulis."\n\n', error);
    }
  };

}).call(this);
