// Generated by CoffeeScript 1.7.1
(function() {
  var async, compiler, exec, execFile, fs, parser, pngquant, raven, svgpng, validator;

  exec = require('child_process').exec;

  execFile = require('child_process').execFile;

  fs = require('fs-extra');

  async = require('async');

  svgpng = require('svg2png');

  compiler = require('./compiler').parse;

  parser = require('./parser').parse;

  validator = require('./validator').parse;

  pngquant = __dirname + '/../bin/pngquant';

  module.exports = {
    don_svg: function(face, mask, iden, callback) {
      if (iden == null) {
        iden = ['A vector image [callback.0]', 'A vector image [callback.1]', 'A vector image [callback.2]', 'A vector image [callback.3]', '\n    A vector image'];
      }
      return async.waterfall([
        function(callback) {
          return fs.writeFile('no_one.coffee', 'fs = require( \'fs-extra\' )\nfvg = require( \'fvg\' )\njaqen = []\n', function(err) {
            raven(iden[0], err, false);
            return callback(null);
          });
        }, function(callback) {
          return fs.readFile(face, 'utf-8', function(err, code) {
            raven(iden[1], err, false);

            /*if validator( compiler ( code ) )
                console.log( 'true... WHAT!?!?!' )
            else
                console.log( 'false...HMMMM?' )
             */
            return callback(null, compiler(code));
          });
        }, function(input, callback) {
          return fs.appendFile('no_one.coffee', input, function(err) {
            raven(iden[2], err, false);
            return callback(null);
          });
        }, function(callback) {
          return fs.appendFile('no_one.coffee', 'fs.writeFileSync \"' + mask + '\", jaqen.join( \"\" )', function(err) {
            raven(iden[3], err, false);
            return callback(null);
          });
        }
      ], function(err, result) {
        return exec('coffee no_one.coffee', function(error, stdout, stderr) {
          if (callback != null) {
            callback(null);
            return raven(iden[4], error, false);
          } else {
            return raven(iden[4], error, true);
          }
        });
      });
    },
    don_png: function(face, mask, opt) {
      var fake, iden;
      if (opt == null) {
        opt = [1, true];
      }
      fake = '.' + mask.slice(0, -4) + '.svg';
      iden = ['A raster image [callback.0]', 'A raster image [callback.1]', 'A raster image [callback.2]', 'A raster image [callback.3]', 'A raster image [callback.4]', '\n    A raster image [optimized]', '\n    A raster image [unoptimized]'];
      return this.don_svg(face, fake, iden, function(err, result) {
        return svgpng(fake, mask, opt[0], function(err) {
          fs.unlinkSync(fake);
          if (opt[1] || (opt[1] == null)) {
            return execFile(pngquant, ["--nofs", "--ext=.png", "--force", mask], function() {
              return raven(iden[5], err, true);
            });
          } else {
            return raven(iden[6], err, true);
          }
        });
      });
    },
    compile: function(code) {
      return compiler(code);
    },
    parse: function(code) {
      return parser(code);
    },
    validate: function(code) {
      return validator(code);
    }
  };

  raven = function(i, error, success) {
    if (success == null) {
      success = false;
    }
    if (!error && success) {
      console.log(i + ': "Valar dohaeris."\n');
    }
    if (error != null) {
      return console.log(i + ': "Valar morghulis."\n\n', error);
    }
  };

}).call(this);
